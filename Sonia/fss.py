# -*- coding: utf-8 -*-
"""fss.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tBMN0xrqPtk0VovRAn5S7yKMJ5rKWVjs
"""

import pandas as pd
import numpy as np
import random

class FSS:
  def __init__(self, bounds, iter_max, n_pop, params, Sind, Sinit, Sfin, w, model, X, Y):
    self.bounds = bounds
    self.iter_max = iter_max
    self.n_pop = n_pop
    
    self.params = self.params
    self.model = model
    self.Sind = Sind
    self.Sinit = Sinit
    self.Sfin = Sfin
    
    self.X = X
    self.Y = Y
    self.w = w
  
  def __call__(self):
    #population generation
    XCmin, XGmin = self.bounds[0][0], self.bounds[1][0]
    XCmax, XGmax  = self.bounds[0][1], self.bounds[1][1]

    population = pd.DataFrame()
    
    pop = list()
    for _ in range(n_pop):

      xc = max(XCmin, min(XCmax, XCmin + random.uniform(0,1)*(XCmax - XCmin)))
      xg = max(XGmin, min(XGmax, XGmin + random.uniform(0,1)*(XGmax - XGmin)))
      pop.append((xc, xg))

    population[['C', 'gamma']] = list(pop)

    t = 0
    while t < self.iter_max:
      population['fit'] = [self.fitness_function(x) for x in population[['C', 'gamma']].values]
      self.Sind = self.Sind - (Sinit - Sfin)/self.iter_max
      for i in range(self.n_pop):
        population.loc[i, ["C"]] = population.loc[i, ["C"]] + random.uniform(0,1)*self.Sind
        population.loc[i, ["gamma"]] = population.loc[i, ["gamma"]] + random.uniform(0,1)*self.Sind
      # self.w = self.w + 


  def fitness_function(self, x):
      # for i in len(self.params):
      #   params[i] = x[i]
      clf = model(kernel='rbf', C=x[0], gamma=x[1], random_state=42)
      scores = cross_val_score(clf, self.X, self.Y, cv=5)

      return scores.mean()